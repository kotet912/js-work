// –î–æ–ø–æ–ª–Ω–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω–æ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É–ª–æ –≤—Å–µ —Å–ª–æ–≤–∞ –≤ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
// –°–ª–æ–≤–∞ —Ä–∞–∑–¥–µ–ª—è—é—Ç—Å—è —Ä–æ–≤–Ω–æ –æ–¥–Ω–∏–º –ø—Ä–æ–±–µ–ª–æ–º, –Ω–∞—á–∞–ª—å–Ω—ã–µ –∏ –∫–æ–Ω–µ—á–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.
//   –ü—Ä–∏–º–µ—Ä(–í—Ö–æ–¥ -> –í—ã—Ö–æ–¥):
// "The greatest victory is that which requires no battle" -- > "battle no requires which that is victory greatest The"

const { assert } = require('chai');

describe("reverseWords", function () {
  it("should work for some examples", function () {
    assert.strictEqual(reverseWords("hello world!"), "world! hello")
    assert.strictEqual(reverseWords("yoda doesn't speak like this"), "this like speak doesn't yoda")
    assert.strictEqual(reverseWords("foobar"), "foobar")
    assert.strictEqual(reverseWords("kata editor"), "editor kata")
    assert.strictEqual(reverseWords("row row row your boat"), "boat your row row row")
    assert.strictEqual(reverseWords(""), "")
  });
});

function reverseWords (str) {
  const wordsArray = str.split(" ");
  const reversedArray = wordsArray.reverse();
  // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ª–æ–≤–∞ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É
  const result = reversedArray.join(" ");

  return result; // reverse those words
}




// // –ù–∞–π—Ç–∏ –ø—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞ –¥–æ ùëõ
// function findPrimesUpTo (n) {
//   const primes = [];
//   for (let i = 2; i <= n; i++) {
//     if (isPrime(i)) {
//       primes.push(i);
//     }
//   }
//   return primes;
// }

// // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ –ø—Ä–æ—Å—Ç—ã–º

// function isPrime (num) {
//   if (num <= 1) {
//     return false;
//   }
//   for (let i = 2; i <= Math.sqrt(num); i++) {
//     if (num % i === 0) {
//       return false;
//     }
//   }
//   return true;
// }

// // –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
// console.log(findPrimesUpTo(10)); // –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: [2, 3, 5, 7]
// console.log(findPrimesUpTo(20)); // –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: [2, 3, 5, 7, 11, 13, 17, 19]


// // –ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å —á–∏—Å–ª–æ
// function reverseNumber (n) {
//   let reversed = 0;
//   while (n > 0) {
//     reversed = reversed * 10 + n % 10; // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–∏—Ñ—Ä—É –∫ –æ–±—Ä–∞—Ç–Ω–æ–º—É —á–∏—Å–ª—É
//     n = Math.floor(n / 10); // –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–∏—Ñ—Ä—É
//   }
//   return reversed
// }

// // –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
// console.log(reverseNumber(1234)); // –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 4321
// console.log(reverseNumber(98765)); // –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 56789

// function sumOfDigits (n) {
//   let sum = 0;
//   while (n > 0) {
//     sum += n % 10; // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–∏—Ñ—Ä—É
//     n = Math.floor(n / 10); // –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–∏—Ñ—Ä—É
//   }
//   return sum;
// }

// // –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
// console.log(sumOfDigits(123)); // –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 6
// console.log(sumOfDigits(4567)); // –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 22
